{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '0', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '1', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '2', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '3', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '4', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '5', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '1', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '6', 'alertRef': '10021'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '4', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '12', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '22', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '23', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '24', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '25', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '26', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '27', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '54', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors.css', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '28', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '67', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '29', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '74', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.css', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '30', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '68', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/driftmotors-removebg-preview.png', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '31', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '32', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '33', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '34', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '23', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '35', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '22', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '36', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '54', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors.css', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '38', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '74', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.css', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '39', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '22', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '40', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '23', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '41', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '68', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/driftmotors-removebg-preview.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '43', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '44', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '45', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '46', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '47', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '48', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '49', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '67', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '50', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '51', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '52', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '53', 'alertRef': '10015'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '54', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors.css', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '54', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '74', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.css', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '55', 'alertRef': '10021'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '56', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '57', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '58', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '23', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '59', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '22', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '60', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '61', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '63', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '64', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '67', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '65', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '66', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '67', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '68', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '68', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/driftmotors-removebg-preview.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '69', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '82', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '70', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '91', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/parts_repair.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '71', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '72', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '67', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '73', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '74', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '75', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '22', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '76', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '77', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '78', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '23', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '80', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '81', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '82', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '83', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '84', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '92', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '85', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '82', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '86', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '91', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/parts_repair.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '87', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/', 'CWE-829': 'https://cwe.mitre.org/data/definitions/829.html'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '88', 'alertRef': '10017'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/', 'CWE-829': 'https://cwe.mitre.org/data/definitions/829.html'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '91', 'alertRef': '10017'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\n <img src="../driftmotors-removebg-preview.png" alt="" width="160" height="50">\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '92', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '93', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '92', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '94', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '95', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '96', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '67', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '97', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '99', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '100', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '101', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '82', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '102', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '91', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/parts_repair.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '103', 'alertRef': '10021'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/', 'CWE-829': 'https://cwe.mitre.org/data/definitions/829.html'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '105', 'alertRef': '10017'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/', 'CWE-829': 'https://cwe.mitre.org/data/definitions/829.html'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': '//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '107', 'alertRef': '10017'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '92', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '108', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '67', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '109', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '111', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '112', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '113', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '114', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '115', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '116', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '117', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>', 'pluginId': '10017', 'cweid': '829', 'confidence': 'Medium', 'wascid': '15', 'description': 'The page includes one or more script files from a third-party domain.', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A08': 'https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/', 'CWE-829': 'https://cwe.mitre.org/data/definitions/829.html'}, 'reference': '', 'solution': "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", 'alert': 'Cross-Domain JavaScript Source File Inclusion', 'param': 'https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js', 'attack': '', 'name': 'Cross-Domain JavaScript Source File Inclusion', 'risk': 'Low', 'id': '118', 'alertRef': '10017'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '119', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '23', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '120', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '121', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '22', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '122', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '92', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '123', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: "" ].', 'method': 'GET', 'evidence': '<form>', 'pluginId': '10202', 'cweid': '352', 'confidence': 'Low', 'wascid': '9', 'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n * The victim has an active session on the target site.\n * The victim is authenticated via HTTP auth on the target site.\n * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'WSTG-v42-SESS-05': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-352': 'https://cwe.mitre.org/data/definitions/352.html'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html\nhttps://cwe.mitre.org/data/definitions/352.html', 'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.', 'alert': 'Absence of Anti-CSRF Tokens', 'param': '', 'attack': '', 'name': 'Absence of Anti-CSRF Tokens', 'risk': 'Medium', 'id': '124', 'alertRef': '10202'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '45', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '125', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '31', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '126', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '77', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '127', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '21', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '128', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '27', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '129', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '75', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '130', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '32', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '131', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '107', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/driftmotors-removebg-preview.png', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '132', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'No links have been found while there are scripts, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '133', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '23', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '134', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '135', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '136', 'alertRef': '10015'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '22', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '137', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '139', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '107', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/driftmotors-removebg-preview.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '140', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '141', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '142', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '143', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '145', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '107', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/driftmotors-removebg-preview.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '146', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '147', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '148', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '80', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '149', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '92', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '150', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '44', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '151', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '152', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '92', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '153', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '154', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '155', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '156', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '100', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '157', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '94', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '158', 'alertRef': '10021'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '109', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '159', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '108', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '160', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '161', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '111', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '162', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '118', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '163', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '124', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '164', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '123', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '165', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '130', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '166', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '126', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '167', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '128', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '168', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '169', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '125', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '170', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '120', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '171', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '137', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '172', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '122', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/John%20Wick.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '173', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '109', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '174', 'alertRef': '10015'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '111', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '175', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '121', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/24_7_Support.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '176', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '108', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '177', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '178', 'alertRef': '10015'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '124', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '179', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '118', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '180', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '128', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '181', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '130', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '182', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '126', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '183', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '184', 'alertRef': '10015'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '120', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '185', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '137', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '186', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '123', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '187', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '125', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '188', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '109', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '189', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '111', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '190', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '108', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '191', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '192', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '124', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '193', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '122', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/John%20Wick.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '194', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '118', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '195', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '128', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '196', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '126', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '197', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '130', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '198', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '199', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '120', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '200', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '123', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '201', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '137', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '202', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '125', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '203', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '109', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '204', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '205', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '111', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '206', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '108', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '207', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '124', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '208', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '121', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/24_7_Support.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '209', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '118', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '210', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '128', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '211', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '122', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/John%20Wick.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '212', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '130', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '213', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '126', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '214', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '215', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '123', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '216', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '137', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '217', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '120', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '218', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '125', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '219', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '109', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '220', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '222', 'alertRef': '10109'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '108', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '223', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '138', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '227', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '230', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '121', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/24_7_Support.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '231', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '125', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '235', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '109', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '236', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '108', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '238', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '239', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '138', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '243', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '246', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '139', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '247', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '125', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '251', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '140', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '252', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '111', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '253', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '112', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '254', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '124', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '255', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '118', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '256', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '128', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '257', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '141', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '258', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '138', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '259', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '126', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '260', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '130', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '261', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '123', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '262', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '137', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '263', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '129', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '264', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '139', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '265', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '120', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '266', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '142', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '267', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '140', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '268', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '141', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '269', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '111', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '270', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '118', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '271', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '128', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '272', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '124', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '273', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '143', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '274', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '138', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '275', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '130', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '276', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '126', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '277', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '139', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '278', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '123', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '279', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '137', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '280', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '120', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '281', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '144', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '282', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '142', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '283', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '140', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '284', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '141', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '285', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '286', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '287', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '158', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '288', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '159', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '289', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '143', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '290', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '161', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '292', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '160', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/reliable.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '293', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '139', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '294', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '144', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '295', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '162', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '296', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '163', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '297', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '164', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '298', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '142', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '299', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '140', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '300', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '141', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '301', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '302', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '143', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '303', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '159', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '304', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '158', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '305', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '306', 'alertRef': '10015'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '161', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '308', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '144', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '310', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '162', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '311', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '164', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '312', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '163', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '313', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '142', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '314', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '160', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/reliable.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '315', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '318', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '158', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '319', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '320', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '159', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '321', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '143', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '322', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '138', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '323', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '161', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '324', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '144', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '326', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '162', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '327', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '164', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '328', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '163', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '329', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '333', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '160', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/reliable.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '334', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '336', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '158', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '337', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '159', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '338', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '138', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '339', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '139', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '340', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '161', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '341', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '163', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '343', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '164', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '344', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '162', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '345', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '141', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '347', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '140', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '348', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '349', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '165', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '350', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '354', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '166', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '356', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '139', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '357', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '142', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '362', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '140', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '363', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '141', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '364', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '365', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '165', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '366', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '143', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '369', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '370', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '166', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '372', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '144', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '373', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '142', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '377', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '165', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '378', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '145', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '379', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '159', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '380', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '158', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '381', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '161', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '382', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '151', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '383', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '143', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '384', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '166', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '385', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '162', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '386', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '163', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '387', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '164', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '388', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '144', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '389', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '165', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '390', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '158', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '391', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '161', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '392', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '159', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '393', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '166', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '394', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '163', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '395', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '162', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '396', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '164', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '397', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '165', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '402', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '166', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '403', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '165', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '404', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '166', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '405', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '180', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '406', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '168', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '407', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '167', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/Sample_User_Icon.png', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '408', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '179', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '409', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '170', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '410', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '178', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '411', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '176', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '412', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '177', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '413', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '173', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '414', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '171', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '415', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '172', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '416', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '183', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '417', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '174', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '418', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '184', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '419', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '175', 'inputVector': '', 'url': 'https://rohit-2003.github.io/assets/css/style.css?v=68a3c20b9a1e4ffbbc9b426c6a87df39d0c78d76', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '420', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '169', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/james-bond.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '421', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '180', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '422', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '167', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/Sample_User_Icon.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '423', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '168', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '424', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '170', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '425', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '179', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '426', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '173', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '427', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '171', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '428', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '172', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '429', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '176', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '430', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '178', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '431', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '183', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '432', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '184', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '433', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '174', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '434', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '177', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '435', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '180', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '436', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '168', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '437', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '167', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/Sample_User_Icon.png', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '438', 'alertRef': '10021'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '170', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '439', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '175', 'inputVector': '', 'url': 'https://rohit-2003.github.io/assets/css/style.css?v=68a3c20b9a1e4ffbbc9b426c6a87df39d0c78d76', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '440', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '169', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/james-bond.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '441', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '179', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '442', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '172', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '443', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '171', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '444', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '173', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '445', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '176', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '446', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '178', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '447', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '184', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '448', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '174', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '449', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '177', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '450', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '183', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '451', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '180', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '452', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '168', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '453', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '170', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '454', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '175', 'inputVector': '', 'url': 'https://rohit-2003.github.io/assets/css/style.css?v=68a3c20b9a1e4ffbbc9b426c6a87df39d0c78d76', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '455', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '169', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/james-bond.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '456', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '172', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '457', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '173', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '458', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '171', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '459', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '179', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '460', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '176', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '461', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '185', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-taycan.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '462', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '178', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '463', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '184', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '464', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '177', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '465', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '174', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '466', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '183', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '467', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '186', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '471', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '187', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '472', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '187', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '486', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '186', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '487', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '185', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-taycan.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '493', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '168', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '499', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '170', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '500', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '180', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '501', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '187', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '502', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '186', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '503', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '173', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '504', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '183', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '505', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '172', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '506', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '176', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '507', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '177', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '508', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '178', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '509', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '184', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '510', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '174', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '511', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '179', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '512', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '171', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '513', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '170', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '514', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '180', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '515', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '168', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '516', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '187', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '517', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '186', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '518', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '173', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '519', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '176', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '520', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '179', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '521', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '178', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '522', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '183', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '523', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '171', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '524', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '172', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '525', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '177', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '526', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '174', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '527', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '184', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '528', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '185', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-taycan.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '529', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '188', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '530', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '189', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '531', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '190', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '532', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10020', 'cweid': '1021', 'confidence': 'Medium', 'wascid': '15', 'description': "The response does not include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options to protect against 'ClickJacking' attacks.", 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-1021': 'https://cwe.mitre.org/data/definitions/1021.html', 'WSTG-v42-CLNT-09': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options', 'solution': 'Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it\'s part of a FRAMESET) then you\'ll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy\'s "frame-ancestors" directive.', 'alert': 'Missing Anti-clickjacking Header', 'param': 'x-frame-options', 'attack': '', 'name': 'Missing Anti-clickjacking Header', 'risk': 'Medium', 'id': '535', 'alertRef': '10020-1'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '198', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '536', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '201', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '537', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '199', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '538', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '202', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '539', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '188', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '540', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '190', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '541', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '189', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '542', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '199', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '545', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '201', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '546', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '198', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '547', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '202', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '548', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'max-age=600', 'pluginId': '10015', 'cweid': '525', 'confidence': 'Low', 'wascid': '13', 'description': 'The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.', 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'CWE-525': 'https://cwe.mitre.org/data/definitions/525.html', 'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/', 'solution': 'For secure content, ensure the cache-control HTTP header is set with "no-cache, no-store, must-revalidate". If an asset should be cached consider setting the directives "public, max-age, immutable".', 'alert': 'Re-examine Cache-control Directives', 'param': 'cache-control', 'attack': '', 'name': 'Re-examine Cache-control Directives', 'risk': 'Informational', 'id': '549', 'alertRef': '10015'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '189', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '550', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '190', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '551', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '188', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '552', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '186', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '553', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '187', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '554', 'alertRef': '10098'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '202', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '555', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10038', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.', 'alert': 'Content Security Policy (CSP) Header Not Set', 'param': '', 'attack': '', 'name': 'Content Security Policy (CSP) Header Not Set', 'risk': 'Medium', 'id': '556', 'alertRef': '10038-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '201', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '557', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '199', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '558', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '198', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '559', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '190', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '560', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '189', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '561', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '188', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '562', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '187', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '563', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '186', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '564', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '199', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '565', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '202', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '566', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '201', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '567', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '198', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '568', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '569', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.', 'method': 'GET', 'evidence': '<a class="navbar-brand" href="#">\r\n <img src="driftmotors-removebg-preview.png" alt="" width="160" height="50">\r\n </a>', 'pluginId': '10109', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.', 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {}, 'reference': '', 'solution': 'This is an informational alert and so no changes are required.', 'alert': 'Modern Web Application', 'param': '', 'attack': '', 'name': 'Modern Web Application', 'risk': 'Informational', 'id': '577', 'alertRef': '10109'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '188', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '585', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '190', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '586', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '189', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '587', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '588', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '201', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '589', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '202', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '590', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '199', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '591', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '198', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '592', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '191', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '593', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '188', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '594', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '189', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '595', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '190', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '596', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '202', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '597', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '199', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '598', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '198', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '599', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '201', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '600', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '203', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '601', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '206', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-macan.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '602', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '209', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-cayenne.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '603', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'style-src includes unsafe-inline.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '203', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: style-src unsafe-inline', 'param': 'Content-Security-Policy', 'attack': '', 'name': 'CSP: style-src unsafe-inline', 'risk': 'Medium', 'id': '604', 'alertRef': '10055-6'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.', 'messageId': '203', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Header & Meta', 'param': '', 'attack': '', 'name': 'CSP: Header & Meta', 'risk': 'Informational', 'id': '605', 'alertRef': '10055-12'}
{'sourceid': '3', 'other': 'The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nform-action\n\nThe directive(s): form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.', 'method': 'GET', 'evidence': "default-src 'none'; style-src 'unsafe-inline'; img-src data:; connect-src 'self'", 'pluginId': '10055', 'cweid': '693', 'confidence': 'High', 'wascid': '15', 'description': 'Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.', 'messageId': '203', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://www.w3.org/TR/CSP/\nhttps://caniuse.com/#search=content+security+policy\nhttps://content-security-policy.com/\nhttps://github.com/HtmlUnit/htmlunit-csp\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources', 'solution': 'Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.', 'alert': 'CSP: Wildcard Directive', 'param': 'content-security-policy', 'attack': '', 'name': 'CSP: Wildcard Directive', 'risk': 'Medium', 'id': '606', 'alertRef': '10055-4'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '205', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/engine.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '608', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '203', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '610', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '203', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '611', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '209', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-cayenne.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '612', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '206', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-macan.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '613', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '209', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-cayenne.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '614', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '206', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-macan.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '615', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '205', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/engine.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '616', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '205', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/engine.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '617', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '214', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-911.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '618', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '222', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-panamera.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '619', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '211', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/timeless-car.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '620', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '217', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky-car.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '621', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '215', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Car_selling.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '622', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '214', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-911.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '623', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '222', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-panamera.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '624', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '214', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-911.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '625', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '211', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/timeless-car.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '626', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '222', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-panamera.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '627', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '217', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky-car.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '628', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '211', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/timeless-car.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '629', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '217', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky-car.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '630', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '215', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Car_selling.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '631', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '215', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Car_selling.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '632', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '236', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-718.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '633', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '236', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-718.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '634', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '233', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/interior.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '635', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '236', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-718.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '636', 'alertRef': '10021'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '233', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/interior.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '637', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '233', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/interior.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '638', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '241', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/warrenty.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '639', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '245', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-artura.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '640', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '241', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/warrenty.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '641', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '245', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-artura.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '642', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '241', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/warrenty.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '643', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '245', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-artura.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '644', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '257', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-g-class.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '645', 'alertRef': '10098'}
{'sourceid': '3', 'other': 'The CORS misconfiguration on the web server permits cross-domain read requests from arbitrary third party domains, using unauthenticated APIs on this domain. Web browser implementations do not permit arbitrary third parties to read the response from authenticated APIs, however. This reduces the risk somewhat. This misconfiguration could be used by an attacker to access data that is available in an unauthenticated manner, but which uses some other form of security, such as IP address white-listing.', 'method': 'GET', 'evidence': 'Access-Control-Allow-Origin: *', 'pluginId': '10098', 'cweid': '264', 'confidence': 'Medium', 'wascid': '14', 'description': 'Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server', 'messageId': '260', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-mclarenp1.jpg', 'tags': {'OWASP_2021_A01': 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/', 'OWASP_2017_A05': 'https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html', 'CWE-264': 'https://cwe.mitre.org/data/definitions/264.html'}, 'reference': 'https://vulncat.fortify.com/en/detail?id=desc.config.dotnet.html5_overly_permissive_cors_policy', 'solution': 'Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance).\nConfigure the "Access-Control-Allow-Origin" HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.', 'alert': 'Cross-Domain Misconfiguration', 'param': '', 'attack': '', 'name': 'Cross-Domain Misconfiguration', 'risk': 'Medium', 'id': '646', 'alertRef': '10098'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '257', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-g-class.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '647', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': "The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.", 'method': 'GET', 'evidence': 'Age: 0', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '260', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-mclarenp1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '648', 'alertRef': '10050-2'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '257', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-g-class.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '649', 'alertRef': '10021'}
{'sourceid': '3', 'other': 'This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt "High" threshold this scan rule will not alert on client or server error responses.', 'method': 'GET', 'evidence': '', 'pluginId': '10021', 'cweid': '693', 'confidence': 'Medium', 'wascid': '15', 'description': "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.", 'messageId': '260', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-mclarenp1.jpg', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-693': 'https://cwe.mitre.org/data/definitions/693.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers', 'solution': "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.", 'alert': 'X-Content-Type-Options Header Missing', 'param': 'x-content-type-options', 'attack': '', 'name': 'X-Content-Type-Options Header Missing', 'risk': 'Low', 'id': '650', 'alertRef': '10021'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '341', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '651', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '345', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '652', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '348', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '653', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '352', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '654', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '356', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '655', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '360', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '656', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '364', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'msnbot/1.1 (+http://search.msn.com/msnbot.htm)', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '657', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '366', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '658', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '368', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '659', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '370', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '660', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '372', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '661', 'alertRef': '10104'}
{'sourceid': '1', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10104', 'cweid': '0', 'confidence': 'Medium', 'wascid': '0', 'description': 'Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.', 'messageId': '374', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors', 'tags': {}, 'reference': 'https://owasp.org/wstg', 'solution': '', 'alert': 'User Agent Fuzzer', 'param': 'Header User-Agent', 'attack': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36', 'name': 'User Agent Fuzzer', 'risk': 'Informational', 'id': '662', 'alertRef': '10104'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '428', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors.css', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '707', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '397', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/index.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '749', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '416', 'inputVector': '', 'url': 'https://rohit-2003.github.io/', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '754', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '420', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '755', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '443', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/About%20Us.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '762', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '419', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/reviews.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '773', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '430', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/DriftMotors_featured.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '774', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '408', 'inputVector': '', 'url': 'https://rohit-2003.github.io/robots.txt', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '779', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '410', 'inputVector': '', 'url': 'https://rohit-2003.github.io/sitemap.xml', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '797', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '468', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/services/services.css', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '805', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '429', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/login.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '812', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '486', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/driftmotors-removebg-preview.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '824', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '504', 'inputVector': '', 'url': 'https://rohit-2003.github.io/assets/css/style.css?v=68a3c20b9a1e4ffbbc9b426c6a87df39d0c78d76', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '826', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '471', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/jaideep-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '851', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '473', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/911.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '864', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '533', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/prithvi-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '877', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '527', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/justin-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '878', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '506', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/taycan.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '882', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '526', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/panamera.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '885', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '469', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '892', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '465', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/rohit-resume.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '902', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '477', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.css', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '903', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '537', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/macan.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '913', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '534', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '916', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '536', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '917', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '544', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/driftmotors-removebg-preview.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '941', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '564', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/james-bond.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '976', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '555', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/718.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1005', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '568', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/p1.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1007', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '546', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1018', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '562', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1019', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '545', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1020', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '566', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C911-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1022', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '563', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1026', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '567', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1027', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '565', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-taycan.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1028', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '553', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1029', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '578', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1069', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '576', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ctaycan-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1070', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '601', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/Sample_User_Icon.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1104', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '603', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1175', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '588', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/g-class.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1181', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '606', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1182', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '604', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1184', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '600', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1185', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '605', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1186', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '580', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1188', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '599', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1189', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '602', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1190', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '583', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1191', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '587', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/artura.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1193', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '607', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1212', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '608', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%20us/FileUploadServlet-removebg-preview.png', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1224', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '609', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1250', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '610', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cmacan-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1251', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '611', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1252', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '612', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cpanamera-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1254', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '615', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1255', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '616', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1338', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '626', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1342', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '617', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1343', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '619', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cg-class-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1344', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '618', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cartura-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1345', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '628', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1346', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '630', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1349', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '622', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/John%20Wick.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1351', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '631', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1354', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '623', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/parts_repair.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1359', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '627', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1360', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '624', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1361', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '633', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1375', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '632', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1376', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '629', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/engine.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1377', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '621', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/interior.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1378', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '649', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/cayenne.html', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1483', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '660', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1489', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '634', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5C718-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1493', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '657', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Cp1-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1496', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '667', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-4.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1577', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '668', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-5.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1580', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '671', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-2.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1581', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '676', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Featured%20Cars%5Ccayenne-3.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1584', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '672', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-911.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1590', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '679', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/reliable.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1606', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '684', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/24_7_Support.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1612', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '685', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/timeless-car.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1615', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '686', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-cayenne.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1620', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '687', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-panamera.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1621', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '688', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-718.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1697', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '689', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-g-class.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1702', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '730', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1759', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '733', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Images%20for%20Review/rocky-car.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1817', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '739', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-macan.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1818', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '746', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/Car_selling.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1838', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '744', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/warrenty.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1839', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '753', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-mclarenp1.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1855', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': 'HIT', 'pluginId': '10050', 'cweid': '-1', 'confidence': 'Medium', 'wascid': '-1', 'description': 'The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance. ', 'messageId': '754', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/car-artura.jpg', 'tags': {'WSTG-v42-ATHN-06': 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses'}, 'reference': 'https://tools.ietf.org/html/rfc7234\nhttps://tools.ietf.org/html/rfc7231\nhttps://www.rfc-editor.org/rfc/rfc9110.html', 'solution': 'Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:\nCache-Control: no-cache, no-store, must-revalidate, private\nPragma: no-cache\nExpires: 0\nThis configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.', 'alert': 'Retrieved from Cache', 'param': '', 'attack': '', 'name': 'Retrieved from Cache', 'risk': 'Informational', 'id': '1862', 'alertRef': '10050-1'}
{'sourceid': '3', 'other': '', 'method': 'GET', 'evidence': '', 'pluginId': '10035', 'cweid': '319', 'confidence': 'High', 'wascid': '15', 'description': 'HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.', 'messageId': '770', 'inputVector': '', 'url': 'https://rohit-2003.github.io/DriftMotors/About%2520us/About%20Us.html', 'tags': {'OWASP_2021_A05': 'https://owasp.org/Top10/A05_2021-Security_Misconfiguration/', 'CWE-319': 'https://cwe.mitre.org/data/definitions/319.html', 'OWASP_2017_A06': 'https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html'}, 'reference': 'https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797', 'solution': 'Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.', 'alert': 'Strict-Transport-Security Header Not Set', 'param': '', 'attack': '', 'name': 'Strict-Transport-Security Header Not Set', 'risk': 'Low', 'id': '1922', 'alertRef': '10035-1'}
Go back